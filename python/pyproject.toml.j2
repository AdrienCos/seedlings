[build-system]
requires = ["setuptools>=69", "setuptools_scm[toml]>=8.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "{{ package_name }}"
authors = [{ name = "{{ author_name }}", email = "{{ author_email }}" }]
description = "{{ project_name }}"
readme = "README.md"
requires-python = ">=3.9,<3.13"
license = { text = "MIT" }
keywords = []

classifiers = [
    "Natural Language :: English",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "License :: OSI Approved :: MIT License",
]
dependencies = [
    "Click==8.1.7",
    "loguru==0.7.2",
]
dynamic = ["version"]


[project.urls]
Homepage = "{{ repository_url }}"
Documentation = "{{ repository_url }}/wiki"
Repository = "{{ repository_url }}"
Issues = "{{ repository_url }}/issues"

[project.scripts]
{{ package_name }} = "{{ package_name }}.cli:main"

[tool.setuptools_scm]
fallback_version = "0.0.1"

[tool.pyright]
include = ["src", "tests"]
pythonVersion = "3.12"
pythonPlatform = "Linux"
typeCheckingMode = "strict"
venvPath = "."
venv = ".venv"

[tool.black]
line-length = 100

[tool.isort]
profile = "black"
line_length = 100

[tool.coverage.run]
branch = true
source = ["{{ package_name }}"]
parallel = true

[tool.coverage.paths]
source = ["src/", ".tox/**/site-packages"]

[tool.ruff]
extend-exclude = ["setup.py"]
line-length = 100

[tool.ruff.lint]
select = [
    "ERA",   # eradicate
    "ASYNC", # flake8-async
    "S",     # flake8-bandit
    "B",     # flake8-bugbear
    "A",     # flake8-builtins
    "C4",    # flake8-comprehensions
    "DTZ",   # flake8-datetimez
    "RET",   # flake8-return
    "PTH",   # flake8-use-pathlib
    "FLY",   # flynt
    "I",     # isort
    "E",     # pycodestyle
    "D",     # pydocstyle
    "UP",    # pyupgrqde
    "F",     # pyflakes
    "RUF",   # ruff
    "TRY",   # tryceratops
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]
"tests/*" = ["S101", "D"]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.isort]
known-first-party = ["{{ package_name }}"]

[tool.typos.default]
extend-ignore-re = ["_commit:.*"]

[tool.pdm.scripts]
# Common configuration
_.env_file = ".version.env"
# Internal helper scripts
_black_format = { cmd = [
    "black",
    "./src",
    "tests/",
], help = "Format of the code" }
_isort_format = { cmd = [
    "isort",
    "./src",
    "tests/",
], help = "Format of the imports" }
_black_check = { cmd = [
    "black",
    # Do not actually format the code
    "--check",
    "./src",
    "tests/",
], help = "Check the formatting of the code" }
_isort_check = { cmd = [
    "isort",
    # Do not actually format the code
    "--check",
    "./src",
    "tests/",
], help = "Check the formatting of the imports" }
_ruff_check = { cmd = [
    "ruff",
    # Do not actually fix the code
    "check",
    "./src",
    "tests/",
], help = "Check the overall code" }
_pyright_check = { cmd = [
    "pyright",
    "--warnings",
], help = "Check the typing of the code" }
_typos_check = { cmd = [
    "typos",
    ".",
], help = "Check the project for any typography" }
_typos_fix = { cmd = [
    "typos",
    "--write-changes",
    ".",
], help = "Fix any typo found in the project" }
_lockfile_check = { cmd = [
    "pdm",
    "lock",
    "--check",
], help = "Check that the lockfile is up-to-date" }
_pytest = { cmd = ["pytest"], help = "Run the test suite" }
_coverage_run = { cmd = [
    "coverage",
    "run",
    "-m",
    "pytest",
], help = "Run the test suite and collect the coverage data" }
_coverage_combine = { cmd = [
    "coverage",
    "combine",
], help = "Combine all the generated test reports" }
_coverage_report = { cmd = [
    "coverage",
    "report",
], help = "Generate a coverage report" }
_coverage_xml = { cmd = [
    "coverage",
    "xml",
], help = "Export an XML coverage report" }
_coverage_html = { cmd = [
    "coverage",
    "html",
], help = "Export an HTML coverage report" }
_precommit_install = { cmd = [
    "pre-commit",
    "install",
], help = "Install the pre-cmmit hooks" }
_precommit_update = { cmd = [
    "pre-commit",
    "autoupdate",
], help = "Update the pre-commit hooks to their latest version" }
_packages_install = { cmd = [
    "pdm",
    "install",
], help = "Install the package's prod and dev dependencies" }
_dev_packages_update = { cmd = [
    "pdm",
    "update",
    # Do not touch the prod packages
    "--no-default",
    # Only touch the dev packages
    "--dev",
], help = "Update the dev packages to their latest version" }
_generate_version = { shell = "echo PACKAGE_VERSION=$(python -m setuptools_scm) | sed 's/+/./' > .version.env", help = "Export the package's version number to .version.env" }
_generate_requirements = { cmd = [
    "pdm",
    "export",
    "--format",
    "requirements",
    "--prod",
    "--output",
    "requirements.txt",
], help = "Generate a requirements file for the runtime dependencies" }
_generate_requirements_no_hashes = { cmd = [
    "pdm",
    "export",
    "--format",
    "requirements",
    "--prod",
    "--without-hashes",
    "--output",
    "requirements.txt",
], help = "Generate a requirements file for the runtime dependencies" }
_build_pex = { cmd = [
    "python",
    "setup.py",
    "bdist_pex",
    "--bdist-all",
    "--pex-args",
    "--requirement=requirements.txt",
], help = "Build a PEX file of the package" }
_build_docker_image = { shell = "docker build -t {{ package_name }}:dev -t {{ package_name }}:${PACKAGE_VERSION} ." }
_build_wheel = { cmd = [
    "pdm",
    "build",
    "--no-sdist",
], help = "Only build the .whl package" }

# Public scripts
format = { composite = [
    "_black_format",
    "_isort_format",
], help = "Format the codebase" }
spell = { composite = [
    "_typos_fix",
], help = "Fix the spelling mistakes found in the project" }
lint = { composite = [
    "_black_check",
    "_isort_check",
    "_pyright_check",
    "_ruff_check",
    "_typos_check",
    "_lockfile_check",
], help = "Lint the codebase" }
test = { composite = ["_pytest"], help = "Run the test suite" }
coverage = { composite = [
    "_coverage_run",
    "_coverage_combine",
    "_coverage_report",
    "_coverage_xml",
    "_coverage_html",
], help = "Measure and report the coverage of the test suite" }
help = { cmd = "pdm run --list", help = "Print the list of existing commands" }
setup = { composite = [
    "_packages_install",
    "_precommit_install",
], help = "Install and configure the development environment" }
dev-update = { composite = [
    "_precommit_update",
    "_dev_packages_update",
], help = "Update the development dependencies and tools" }
clean = { cmd = [
    "pyclean",
    "--debris",
    "all",
    "--erase",
    ".version.env",
    "--yes",
    "--",
    ".",
], help = "Remove all the build artifacts, caches, and other debris" }
docker-build = { composite = [
    "_generate_version",
    "_build_docker_image",
], help = "Build a Docker image of the application" }
pex-build = { composite = [
    "_generate_requirements_no_hashes",
    "_build_pex",
], help = "Build a (reproducible) PEX executable of each entrypoint of the application" }
cross-test = { cmd = [
    "tox",
    "run-parallel",
], help = "Run the test suite against multiple Python versions" }
template-update = { cmd = [
    "copier",
    "update",
    '--skip-answered',
], help = "Update the project to the latest version of the template" }

[tool.pdm.dev-dependencies]
dev = [
    "black==24.4.2",
    "copier==9.3.1",
    "coverage==7.5.4",
    "isort==5.13.2",
    "pex==2.7.0",
    "pre-commit==3.7.1",
    "pyclean==3.0.0",
    "pyright==1.1.370",
    "pytest==8.2.2",
    "rope==1.13.0",
    "ruff==0.5.1",
    "setuptools-scm==8.1.0",
    "toml==0.10.2",
    "tox-pdm==0.7.2",
    "tox==4.16.0",
    "typos==1.23.0",
]
